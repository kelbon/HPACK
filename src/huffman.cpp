
#include <cstdint>
#include <cassert>

#include "hpack/basic_types.hpp"

namespace hpack {

static consteval sym_info_t create_sym_info(std::string_view value, int bitcount) {
  assert(value.size() == bitcount);
  sym_info_t info{.bits = 0, .bit_count = static_cast<uint8_t>(bitcount)};
  for (int i = 0; i < bitcount; ++i) {
    uint32_t bit = value[i] == '1';
    if (value[i] != '1' && value[i] != '0')
      throw 42;
    info.bits |= (bit << i);
  }
  return info;
}

constexpr sym_info_t huffman_table[257] = {
#define HUFFMAN_TABLE(index, bits, bitcount) create_sym_info(#bits, bitcount),
#include "hpack/huffman_table.def"
};

sym_info_t huffman_table_get(uint8_t i) noexcept {
  return huffman_table[i];
}

uint16_t huffman_decode_table_find(sym_info_t info) {
#define HUFFMAN_TABLE(index, bits, bitcount) \
  case bits:                                 \
    return uint16_t(index);
  switch (info.bit_count) {
    case 5: {
      switch (info.bits) {
        HUFFMAN_TABLE(48, 0b00000, 5)
        HUFFMAN_TABLE(49, 0b00001, 5)
        HUFFMAN_TABLE(50, 0b00010, 5)
        HUFFMAN_TABLE(97, 0b00011, 5)
        HUFFMAN_TABLE(99, 0b00100, 5)
        HUFFMAN_TABLE(101, 0b00101, 5)
        HUFFMAN_TABLE(105, 0b00110, 5)
        HUFFMAN_TABLE(111, 0b00111, 5)
        HUFFMAN_TABLE(115, 0b01000, 5)
        HUFFMAN_TABLE(116, 0b01001, 5)
      }
      goto end;
    }
    case 6: {
      switch (info.bits) {
        HUFFMAN_TABLE(32, 0b010100, 6)
        HUFFMAN_TABLE(37, 0b010101, 6)
        HUFFMAN_TABLE(45, 0b010110, 6)
        HUFFMAN_TABLE(46, 0b010111, 6)
        HUFFMAN_TABLE(47, 0b011000, 6)
        HUFFMAN_TABLE(51, 0b011001, 6)
        HUFFMAN_TABLE(52, 0b011010, 6)
        HUFFMAN_TABLE(53, 0b011011, 6)
        HUFFMAN_TABLE(54, 0b011100, 6)
        HUFFMAN_TABLE(55, 0b011101, 6)
        HUFFMAN_TABLE(56, 0b011110, 6)
        HUFFMAN_TABLE(57, 0b011111, 6)
        HUFFMAN_TABLE(61, 0b100000, 6)
        HUFFMAN_TABLE(65, 0b100001, 6)
        HUFFMAN_TABLE(95, 0b100010, 6)
        HUFFMAN_TABLE(98, 0b100011, 6)
        HUFFMAN_TABLE(100, 0b100100, 6)
        HUFFMAN_TABLE(102, 0b100101, 6)
        HUFFMAN_TABLE(103, 0b100110, 6)
        HUFFMAN_TABLE(104, 0b100111, 6)
        HUFFMAN_TABLE(108, 0b101000, 6)
        HUFFMAN_TABLE(109, 0b101001, 6)
        HUFFMAN_TABLE(110, 0b101010, 6)
        HUFFMAN_TABLE(112, 0b101011, 6)
        HUFFMAN_TABLE(114, 0b101100, 6)
        HUFFMAN_TABLE(117, 0b101101, 6)
      }
      goto end;
    }
    case 7: {
      switch (info.bits) {
        HUFFMAN_TABLE(58, 0b1011100, 7)
        HUFFMAN_TABLE(66, 0b1011101, 7)
        HUFFMAN_TABLE(67, 0b1011110, 7)
        HUFFMAN_TABLE(68, 0b1011111, 7)
        HUFFMAN_TABLE(69, 0b1100000, 7)
        HUFFMAN_TABLE(70, 0b1100001, 7)
        HUFFMAN_TABLE(71, 0b1100010, 7)
        HUFFMAN_TABLE(72, 0b1100011, 7)
        HUFFMAN_TABLE(73, 0b1100100, 7)
        HUFFMAN_TABLE(74, 0b1100101, 7)
        HUFFMAN_TABLE(75, 0b1100110, 7)
        HUFFMAN_TABLE(76, 0b1100111, 7)
        HUFFMAN_TABLE(77, 0b1101000, 7)
        HUFFMAN_TABLE(78, 0b1101001, 7)
        HUFFMAN_TABLE(79, 0b1101010, 7)
        HUFFMAN_TABLE(80, 0b1101011, 7)
        HUFFMAN_TABLE(81, 0b1101100, 7)
        HUFFMAN_TABLE(82, 0b1101101, 7)
        HUFFMAN_TABLE(83, 0b1101110, 7)
        HUFFMAN_TABLE(84, 0b1101111, 7)
        HUFFMAN_TABLE(85, 0b1110000, 7)
        HUFFMAN_TABLE(86, 0b1110001, 7)
        HUFFMAN_TABLE(87, 0b1110010, 7)
        HUFFMAN_TABLE(89, 0b1110011, 7)
        HUFFMAN_TABLE(106, 0b1110100, 7)
        HUFFMAN_TABLE(107, 0b1110101, 7)
        HUFFMAN_TABLE(113, 0b1110110, 7)
        HUFFMAN_TABLE(118, 0b1110111, 7)
        HUFFMAN_TABLE(119, 0b1111000, 7)
        HUFFMAN_TABLE(120, 0b1111001, 7)
        HUFFMAN_TABLE(121, 0b1111010, 7)
        HUFFMAN_TABLE(122, 0b1111011, 7)
      }
      goto end;
    }
    case 8: {
      switch (info.bits) {
        HUFFMAN_TABLE(38, 0b11111000, 8)
        HUFFMAN_TABLE(42, 0b11111001, 8)
        HUFFMAN_TABLE(44, 0b11111010, 8)
        HUFFMAN_TABLE(59, 0b11111011, 8)
        HUFFMAN_TABLE(88, 0b11111100, 8)
        HUFFMAN_TABLE(90, 0b11111101, 8)
      }
      goto end;
    }
    case 10: {
      switch (info.bits) {
        HUFFMAN_TABLE(33, 0b1111111000, 10)
        HUFFMAN_TABLE(34, 0b1111111001, 10)
        HUFFMAN_TABLE(40, 0b1111111010, 10)
        HUFFMAN_TABLE(41, 0b1111111011, 10)
        HUFFMAN_TABLE(63, 0b1111111100, 10)
      }
      goto end;
    }
    case 11: {
      switch (info.bits) {
        HUFFMAN_TABLE(39, 0b11111111010, 11)
        HUFFMAN_TABLE(43, 0b11111111011, 11)
        HUFFMAN_TABLE(124, 0b11111111100, 11)
      }
      goto end;
    }
    case 12: {
      switch (info.bits) {
        HUFFMAN_TABLE(35, 0b111111111010, 12)
        HUFFMAN_TABLE(62, 0b111111111011, 12)
      }
      goto end;
    }
    case 13: {
      switch (info.bits) {
        HUFFMAN_TABLE(0, 0b1111111111000, 13)
        HUFFMAN_TABLE(36, 0b1111111111001, 13)
        HUFFMAN_TABLE(64, 0b1111111111010, 13)
        HUFFMAN_TABLE(91, 0b1111111111011, 13)
        HUFFMAN_TABLE(93, 0b1111111111100, 13)
        HUFFMAN_TABLE(126, 0b1111111111101, 13)
      }
      goto end;
    }
    case 14: {
      switch (info.bits) {
        HUFFMAN_TABLE(94, 0b11111111111100, 14)
        HUFFMAN_TABLE(125, 0b11111111111101, 14)
      }
      goto end;
    }
    case 15: {
      switch (info.bits) {
        HUFFMAN_TABLE(60, 0b111111111111100, 15)
        HUFFMAN_TABLE(96, 0b111111111111101, 15)
        HUFFMAN_TABLE(123, 0b111111111111110, 15)
      }
      goto end;
    }
    case 19: {
      switch (info.bits) {
        HUFFMAN_TABLE(92, 0b1111111111111110000, 19)
        HUFFMAN_TABLE(195, 0b1111111111111110001, 19)
        HUFFMAN_TABLE(208, 0b1111111111111110010, 19)
      }
      goto end;
    }
    case 20: {
      switch (info.bits) {
        HUFFMAN_TABLE(128, 0b11111111111111100110, 20)
        HUFFMAN_TABLE(130, 0b11111111111111100111, 20)
        HUFFMAN_TABLE(131, 0b11111111111111101000, 20)
        HUFFMAN_TABLE(162, 0b11111111111111101001, 20)
        HUFFMAN_TABLE(184, 0b11111111111111101010, 20)
        HUFFMAN_TABLE(194, 0b11111111111111101011, 20)
        HUFFMAN_TABLE(224, 0b11111111111111101100, 20)
        HUFFMAN_TABLE(226, 0b11111111111111101101, 20)
      }
      goto end;
    }
    case 21: {
      switch (info.bits) {
        HUFFMAN_TABLE(153, 0b111111111111111011100, 21)
        HUFFMAN_TABLE(161, 0b111111111111111011101, 21)
        HUFFMAN_TABLE(167, 0b111111111111111011110, 21)
        HUFFMAN_TABLE(172, 0b111111111111111011111, 21)
        HUFFMAN_TABLE(176, 0b111111111111111100000, 21)
        HUFFMAN_TABLE(177, 0b111111111111111100001, 21)
        HUFFMAN_TABLE(179, 0b111111111111111100010, 21)
        HUFFMAN_TABLE(209, 0b111111111111111100011, 21)
        HUFFMAN_TABLE(216, 0b111111111111111100100, 21)
        HUFFMAN_TABLE(217, 0b111111111111111100101, 21)
        HUFFMAN_TABLE(227, 0b111111111111111100110, 21)
        HUFFMAN_TABLE(229, 0b111111111111111100111, 21)
        HUFFMAN_TABLE(230, 0b111111111111111101000, 21)
      }
      goto end;
    }
    case 22: {
      switch (info.bits) {
        HUFFMAN_TABLE(129, 0b1111111111111111010010, 22)
        HUFFMAN_TABLE(132, 0b1111111111111111010011, 22)
        HUFFMAN_TABLE(133, 0b1111111111111111010100, 22)
        HUFFMAN_TABLE(134, 0b1111111111111111010101, 22)
        HUFFMAN_TABLE(136, 0b1111111111111111010110, 22)
        HUFFMAN_TABLE(146, 0b1111111111111111010111, 22)
        HUFFMAN_TABLE(154, 0b1111111111111111011000, 22)
        HUFFMAN_TABLE(156, 0b1111111111111111011001, 22)
        HUFFMAN_TABLE(160, 0b1111111111111111011010, 22)
        HUFFMAN_TABLE(163, 0b1111111111111111011011, 22)
        HUFFMAN_TABLE(164, 0b1111111111111111011100, 22)
        HUFFMAN_TABLE(169, 0b1111111111111111011101, 22)
        HUFFMAN_TABLE(170, 0b1111111111111111011110, 22)
        HUFFMAN_TABLE(173, 0b1111111111111111011111, 22)
        HUFFMAN_TABLE(178, 0b1111111111111111100000, 22)
        HUFFMAN_TABLE(181, 0b1111111111111111100001, 22)
        HUFFMAN_TABLE(185, 0b1111111111111111100010, 22)
        HUFFMAN_TABLE(186, 0b1111111111111111100011, 22)
        HUFFMAN_TABLE(187, 0b1111111111111111100100, 22)
        HUFFMAN_TABLE(189, 0b1111111111111111100101, 22)
        HUFFMAN_TABLE(190, 0b1111111111111111100110, 22)
        HUFFMAN_TABLE(196, 0b1111111111111111100111, 22)
        HUFFMAN_TABLE(198, 0b1111111111111111101000, 22)
        HUFFMAN_TABLE(228, 0b1111111111111111101001, 22)
        HUFFMAN_TABLE(232, 0b1111111111111111101010, 22)
        HUFFMAN_TABLE(233, 0b1111111111111111101011, 22)
      }
      goto end;
    }
    case 23: {
      switch (info.bits) {
        HUFFMAN_TABLE(1, 0b11111111111111111011000, 23)
        HUFFMAN_TABLE(135, 0b11111111111111111011001, 23)
        HUFFMAN_TABLE(137, 0b11111111111111111011010, 23)
        HUFFMAN_TABLE(138, 0b11111111111111111011011, 23)
        HUFFMAN_TABLE(139, 0b11111111111111111011100, 23)
        HUFFMAN_TABLE(140, 0b11111111111111111011101, 23)
        HUFFMAN_TABLE(141, 0b11111111111111111011110, 23)
        HUFFMAN_TABLE(143, 0b11111111111111111011111, 23)
        HUFFMAN_TABLE(147, 0b11111111111111111100000, 23)
        HUFFMAN_TABLE(149, 0b11111111111111111100001, 23)
        HUFFMAN_TABLE(150, 0b11111111111111111100010, 23)
        HUFFMAN_TABLE(151, 0b11111111111111111100011, 23)
        HUFFMAN_TABLE(152, 0b11111111111111111100100, 23)
        HUFFMAN_TABLE(155, 0b11111111111111111100101, 23)
        HUFFMAN_TABLE(157, 0b11111111111111111100110, 23)
        HUFFMAN_TABLE(158, 0b11111111111111111100111, 23)
        HUFFMAN_TABLE(165, 0b11111111111111111101000, 23)
        HUFFMAN_TABLE(166, 0b11111111111111111101001, 23)
        HUFFMAN_TABLE(168, 0b11111111111111111101010, 23)
        HUFFMAN_TABLE(174, 0b11111111111111111101011, 23)
        HUFFMAN_TABLE(175, 0b11111111111111111101100, 23)
        HUFFMAN_TABLE(180, 0b11111111111111111101101, 23)
        HUFFMAN_TABLE(182, 0b11111111111111111101110, 23)
        HUFFMAN_TABLE(183, 0b11111111111111111101111, 23)
        HUFFMAN_TABLE(188, 0b11111111111111111110000, 23)
        HUFFMAN_TABLE(191, 0b11111111111111111110001, 23)
        HUFFMAN_TABLE(197, 0b11111111111111111110010, 23)
        HUFFMAN_TABLE(231, 0b11111111111111111110011, 23)
        HUFFMAN_TABLE(239, 0b11111111111111111110100, 23)
      }
      goto end;
    }
    case 24: {
      switch (info.bits) {
        HUFFMAN_TABLE(9, 0b111111111111111111101010, 24)
        HUFFMAN_TABLE(142, 0b111111111111111111101011, 24)
        HUFFMAN_TABLE(144, 0b111111111111111111101100, 24)
        HUFFMAN_TABLE(145, 0b111111111111111111101101, 24)
        HUFFMAN_TABLE(148, 0b111111111111111111101110, 24)
        HUFFMAN_TABLE(159, 0b111111111111111111101111, 24)
        HUFFMAN_TABLE(171, 0b111111111111111111110000, 24)
        HUFFMAN_TABLE(206, 0b111111111111111111110001, 24)
        HUFFMAN_TABLE(215, 0b111111111111111111110010, 24)
        HUFFMAN_TABLE(225, 0b111111111111111111110011, 24)
        HUFFMAN_TABLE(236, 0b111111111111111111110100, 24)
        HUFFMAN_TABLE(237, 0b111111111111111111110101, 24)
      }
      goto end;
    }
    case 25: {
      switch (info.bits) {
        HUFFMAN_TABLE(199, 0b1111111111111111111101100, 25)
        HUFFMAN_TABLE(207, 0b1111111111111111111101101, 25)
        HUFFMAN_TABLE(234, 0b1111111111111111111101110, 25)
        HUFFMAN_TABLE(235, 0b1111111111111111111101111, 25)
      }
      goto end;
    }
    case 26: {
      switch (info.bits) {
        HUFFMAN_TABLE(192, 0b11111111111111111111100000, 26)
        HUFFMAN_TABLE(193, 0b11111111111111111111100001, 26)
        HUFFMAN_TABLE(200, 0b11111111111111111111100010, 26)
        HUFFMAN_TABLE(201, 0b11111111111111111111100011, 26)
        HUFFMAN_TABLE(202, 0b11111111111111111111100100, 26)
        HUFFMAN_TABLE(205, 0b11111111111111111111100101, 26)
        HUFFMAN_TABLE(210, 0b11111111111111111111100110, 26)
        HUFFMAN_TABLE(213, 0b11111111111111111111100111, 26)
        HUFFMAN_TABLE(218, 0b11111111111111111111101000, 26)
        HUFFMAN_TABLE(219, 0b11111111111111111111101001, 26)
        HUFFMAN_TABLE(238, 0b11111111111111111111101010, 26)
        HUFFMAN_TABLE(240, 0b11111111111111111111101011, 26)
        HUFFMAN_TABLE(242, 0b11111111111111111111101100, 26)
        HUFFMAN_TABLE(243, 0b11111111111111111111101101, 26)
        HUFFMAN_TABLE(255, 0b11111111111111111111101110, 26)
      }
      goto end;
    }
    case 27: {
      switch (info.bits) {
        HUFFMAN_TABLE(203, 0b111111111111111111111011110, 27)
        HUFFMAN_TABLE(204, 0b111111111111111111111011111, 27)
        HUFFMAN_TABLE(211, 0b111111111111111111111100000, 27)
        HUFFMAN_TABLE(212, 0b111111111111111111111100001, 27)
        HUFFMAN_TABLE(214, 0b111111111111111111111100010, 27)
        HUFFMAN_TABLE(221, 0b111111111111111111111100011, 27)
        HUFFMAN_TABLE(222, 0b111111111111111111111100100, 27)
        HUFFMAN_TABLE(223, 0b111111111111111111111100101, 27)
        HUFFMAN_TABLE(241, 0b111111111111111111111100110, 27)
        HUFFMAN_TABLE(244, 0b111111111111111111111100111, 27)
        HUFFMAN_TABLE(245, 0b111111111111111111111101000, 27)
        HUFFMAN_TABLE(246, 0b111111111111111111111101001, 27)
        HUFFMAN_TABLE(247, 0b111111111111111111111101010, 27)
        HUFFMAN_TABLE(248, 0b111111111111111111111101011, 27)
        HUFFMAN_TABLE(250, 0b111111111111111111111101100, 27)
        HUFFMAN_TABLE(251, 0b111111111111111111111101101, 27)
        HUFFMAN_TABLE(252, 0b111111111111111111111101110, 27)
        HUFFMAN_TABLE(253, 0b111111111111111111111101111, 27)
        HUFFMAN_TABLE(254, 0b111111111111111111111110000, 27)
      }
      goto end;
    }
    case 28: {
      switch (info.bits) {
        HUFFMAN_TABLE(2, 0b1111111111111111111111100010, 28)
        HUFFMAN_TABLE(3, 0b1111111111111111111111100011, 28)
        HUFFMAN_TABLE(4, 0b1111111111111111111111100100, 28)
        HUFFMAN_TABLE(5, 0b1111111111111111111111100101, 28)
        HUFFMAN_TABLE(6, 0b1111111111111111111111100110, 28)
        HUFFMAN_TABLE(7, 0b1111111111111111111111100111, 28)
        HUFFMAN_TABLE(8, 0b1111111111111111111111101000, 28)
        HUFFMAN_TABLE(11, 0b1111111111111111111111101001, 28)
        HUFFMAN_TABLE(12, 0b1111111111111111111111101010, 28)
        HUFFMAN_TABLE(14, 0b1111111111111111111111101011, 28)
        HUFFMAN_TABLE(15, 0b1111111111111111111111101100, 28)
        HUFFMAN_TABLE(16, 0b1111111111111111111111101101, 28)
        HUFFMAN_TABLE(17, 0b1111111111111111111111101110, 28)
        HUFFMAN_TABLE(18, 0b1111111111111111111111101111, 28)
        HUFFMAN_TABLE(19, 0b1111111111111111111111110000, 28)
        HUFFMAN_TABLE(20, 0b1111111111111111111111110001, 28)
        HUFFMAN_TABLE(21, 0b1111111111111111111111110010, 28)
        HUFFMAN_TABLE(23, 0b1111111111111111111111110011, 28)
        HUFFMAN_TABLE(24, 0b1111111111111111111111110100, 28)
        HUFFMAN_TABLE(25, 0b1111111111111111111111110101, 28)
        HUFFMAN_TABLE(26, 0b1111111111111111111111110110, 28)
        HUFFMAN_TABLE(27, 0b1111111111111111111111110111, 28)
        HUFFMAN_TABLE(28, 0b1111111111111111111111111000, 28)
        HUFFMAN_TABLE(29, 0b1111111111111111111111111001, 28)
        HUFFMAN_TABLE(30, 0b1111111111111111111111111010, 28)
        HUFFMAN_TABLE(31, 0b1111111111111111111111111011, 28)
        HUFFMAN_TABLE(127, 0b1111111111111111111111111100, 28)
        HUFFMAN_TABLE(220, 0b1111111111111111111111111101, 28)
        HUFFMAN_TABLE(249, 0b1111111111111111111111111110, 28)
      }
      goto end;
    }
    case 30: {
      switch (info.bits) {
        HUFFMAN_TABLE(10, 0b111111111111111111111111111100, 30)
        HUFFMAN_TABLE(13, 0b111111111111111111111111111101, 30)
        HUFFMAN_TABLE(22, 0b111111111111111111111111111110, 30)
        HUFFMAN_TABLE(256, 0b111111111111111111111111111111, 30)
      }
      goto end;
    }
  }
end:
  return uint16_t(-1);
}

}  // namespace hpack
